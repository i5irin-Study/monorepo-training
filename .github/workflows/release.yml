name: release
on:
  pull_request:
    branches:
      - main
    types: [closed]
jobs:
  tag:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get updated packages
        env:
          TZ: 'Asia/Tokyo'
        run: |
          packages=$(find packages -mindepth 1 -maxdepth 1 -type d | sed 's/^packages\///')
          package_shas=()
          IFS=$'\n';
          for package in $(echo "$packages")
          do
            latest_version=$(git tag |
            sed -rn "s/$package\/v((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$)/\1/p" |
            sort -Vr |
            head -1)
            if [ -n "$latest_version" ]; then
              prev_tag_sha=$(git rev-parse "$package/v$latest_version")
              package_shas+=("$package $prev_tag_sha")
            else
              initial_sha=$(git rev-list --max-parents=0 HEAD)
              package_shas+=("$package $initial_sha")
            fi
          done

          updated_packages=()
          for package_sha in "${package_shas[@]}"
          do
            package=$(echo "$package_sha" | cut -d " " -f 1)
            sha=$(echo "$package_sha" | cut -d " " -f 2)
            commit_titles=$(git log --pretty=format:'%s:%at' "$sha...9e8df06455d5ddb071b31e314fd530eef54d9ff4" -- "packages/$package" |
            sort -t ':' -k 1,1 -k 3,3 |
            sed -nr 's/:[0-9]*$//p')
            if [ -n "$commit_titles" ]; then
              updated_packages+=("$package_sha")
            fi
          done

          for updated_package in "${updated_packages[@]}"
          do
            package=$(echo "$updated_package" | cut -d " " -f 1)
            sha=$(echo "$updated_package" | cut -d " " -f 2)
            commit_titles=$(git log --pretty=format:'%s:%at' "$sha...9e8df06455d5ddb071b31e314fd530eef54d9ff4" -- "packages/$package" |
            sort -t ':' -k 1,1 -k 3,3 |
            sed -nr 's/:[0-9]*$//p')
            breaking_flags=$(echo "$commit_titles" |
            sed -nr 's/^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-zA-Z_0-9]+\))?(!)?: (.*)$/\3/p')
            feature_updates=$(echo "$commit_titles" |
            sed -nr 's/^chore(\([a-zA-Z_0-9]+\))?(!)?: (.*)$/\3/p' |
            sed 's/^/+ /g' |
            sed ':start $!{N; b start}; s/\n/\\n/g')
            fix_updates=$(echo "$commit_titles" |
            sed -nr 's/^test(\([a-zA-Z_0-9]+\))?(!)?: (.*)$/\3/p' |
            sed 's/^/+ /g' |
            sed ':start $!{N; b start}; s/\n/\\n/g')
            new_version="0.1.0"
            if git describe --tags "$sha" | grep -Eq "$package\/v((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$)"; then
              current_version=$(git describe --tags "$sha" | sed -rn "s/$package\/v((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$)/\1/p")
              IFS=. read -r major minor patch <<EOF
          $current_version
          EOF
              if [ -n "$breaking_flags" ]; then
                if [ $major -eq 0 ]; then
                  new_version="$major.$((minor+1)).0"
                else
                  new_version="$((major+1)).0.0"
                fi
              elif [ -n "$feature_updates" ]; then
                new_version="$major.$((minor+1)).0"
              else
                new_version="$major.$minor.$((patch+1))"
              fi
            fi
            new_tag="$package/v$new_version"
            echo "$new_tag"
            git tag "$new_tag"

            if [ -n "$feature_updates" ]; then
              features_note="### 🚀 Features\n$feature_updates"
            fi
            if [ -n "fix_updates" ]; then
              fixes_note="### 🐛 Bug Fixes\n$fix_updates"
            fi
            header="$new_tag - $(date +'%Y-%m-%d')"
            body=$(echo "$features_note\n\n$fixes_note" | sed -r 's/\\n/\\r\\n/g')

            git push "https://i5irin:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" "$new_tag"
            curl \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{\"tag_name\":\"$new_tag\",\"name\":\"$header\",\"body\":\"$body\"}"
          done

  # publish-github:
  #   runs-on: ubuntu-latest
  #   needs: [bump-version, get-tags]
  #   steps:
  #     - name: Format Release Note
  #       id: format
  #       run: |
  #         encoded=$(echo "${{ needs.bump-version.outputs.changelog-body }}" | sed -r 's/\\n/\\r\\n/g')
  #         echo "::set-output name=encoded::$encoded"
  #     - name: GitHub Release
  #       uses: actions/github-script@v6
  #       env:
  #         CHANGELOG_HEADER: ${{ needs.bump-version.outputs.changelog-header }}
  #         CHANGELOG_BODY: ${{ steps.format.outputs.encoded }}
  #         TAG: ${{ needs.get-tags.outputs.new }}
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const { CHANGELOG_HEADER, CHANGELOG_BODY, TAG } = process.env;
  #           github.rest.repos.createRelease({
  #             name: CHANGELOG_HEADER,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             tag_name: TAG,
  #             body: CHANGELOG_BODY.replace(/\\r\\n/g, '\r\n'),
  #           });

  # publish-npm:
  #   runs-on: ubuntu-latest
  #   needs: bump-version
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ needs.bump-version.outputs.release-sha }}
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.15.1
  #         cache: 'npm'
  #         registry-url: 'https://registry.npmjs.org'
  #     - run: cat ./packages/greet/package.json
  #     - run: npm ci
  #     - run: npm run build -w packages/${{ github.event.inputs.package-name }}
  #     - name: Publish NPM package
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: npm publish

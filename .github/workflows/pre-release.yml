name: pre-release
on:
  workflow_dispatch:
    inputs:
      package-name:
        description: 'Package name to be release'
        required: true
      package-version:
        description: 'Version to be release'
        required: true
jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
      prev-version-sha: ${{ steps.get-latest.outputs.prev-version-sha }}
      new: ${{ steps.get-new.outputs.version }}
      release-branch: ${{ steps.create-branch.outputs.branch }}
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get latest package version
        id: get-latest
        run: |
          latest_version=$(git tag |
          sed -rn "s/${{ github.event.inputs.package-name }}\/v((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$)/\1/p" |
          sort -Vr |
          head -1)
          if [ -n "$latest_version" ]; then
            echo "::set-output name=version::${{ github.event.inputs.package-name }}/v$latest_version"
            prev_tag_sha=$(git rev-parse "${{ github.event.inputs.package-name }}/v$latest_version")
            echo "::set-output name=prev-version-sha::$prev_tag_sha"
          else
            initial_sha=$(git rev-list --max-parents=0 HEAD)
            echo "::set-output name=prev-version-sha::$initial_sha"
          fi
      - name: Get new package version
        id: get-new
        run: |
          new_version="${{ github.event.inputs.package-name }}/v${{ github.event.inputs.package-version }}"
          echo "::set-output name=version::$new_version"
      - name: Create new branch
        id: create-branch
        run: |
          branch="release/${{ steps.get-new.outputs.version }}"
          git checkout -b "$branch"
          git push origin "$branch"
          echo "::set-output name=branch::$branch"

  bump-version:
    runs-on: ubuntu-latest
    needs: get-tags
    outputs:
      changelog-header: ${{ steps.generate-changelog.outputs.header }}
      changelog-body: ${{ steps.generate-changelog.outputs.body }}
      release-sha: ${{ steps.commit.outputs.head }}
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git checkout "${{ needs.get-tags.outputs.release-branch }}"
      - name: Get today
        id: get-date
        env:
          TZ: 'Asia/Tokyo'
        run: echo "::set-output name=today::$(date +'%Y-%m-%d')"
      - name: Get updates information
        id: get-updates
        run: |
          commit_titles=$(git log --pretty=format:'%s:%at' "${{ needs.get-tags.outputs.prev-version-sha }}...${{ github.sha }}" -- "packages/${{ github.event.inputs.package-name }}" |
          sort -t ':' -k 1,1 -k 3,3 |
          sed -nr 's/:[0-9]*$//p')
          feature_updates=$(echo "$commit_titles" |
          sed -nr 's/^chore(\([a-zA-Z_0-9]+\))?(!)?: (.*)$/\3/p' |
          sed 's/^/+ /g' |
          sed ':start $!{N; b start}; s/\n/\\n/g')
          fix_updates=$(echo "$commit_titles" |
          sed -nr 's/^test(\([a-zA-Z_0-9]+\))?(!)?: (.*)$/\3/p' |
          sed 's/^/+ /g' |
          sed ':start $!{N; b start}; s/\n/\\n/g')
          echo "::set-output name=features::$feature_updates"
          echo "::set-output name=fixes::$fix_updates"
          test -n "$commit_titles"
      - name: Generate changelog
        id: generate-changelog
        run: |
          if [ -n "${{ steps.get-updates.outputs.features }}" ]; then
            features_note="### üöÄ Features\n${{ steps.get-updates.outputs.features }}"
          fi
          if [ -n "${{ steps.get-updates.outputs.fixes }}" ]; then
            fixes_note="### üêõ Bug Fixes\n${{ steps.get-updates.outputs.fixes }}"
          fi
          header="${{ needs.get-tags.outputs.new }} - ${{ steps.get-date.outputs.today }}"
          body="$features_note\n\n$fixes_note"
          echo "::set-output name=header::$header"
          echo "::set-output name=body::$body"
      - name: Update CHANGELOG.md
        run: |
          changelog="## ${{ steps.generate-changelog.outputs.header }}\n\n${{ steps.generate-changelog.outputs.body }}\n"
          sed -i "/insert\-new\-changelog\-here/a $changelog" ./CHANGELOG.md
      - name: Update package.json
        run: |
          current_version=$(node -p "require('./packages/${{ github.event.inputs.package-name }}/package.json').version")
          sed -i "s/$current_version/${{ github.event.inputs.package-version }}/" "./packages/${{ github.event.inputs.package-name }}/package.json"
      - name: Commit and Push
        id: commit
        env:
          TZ: 'Asia/Tokyo'
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add ./CHANGELOG.md "./packages/${{ github.event.inputs.package-name }}/package.json"
          git commit --author='i5irin <contact@i5ir.in>' -m 'chore(release): update version and changelog' --no-verify
          git tag "${{ github.event.inputs.package-name }}/v${{ github.event.inputs.package-version }}"
          git push origin HEAD:"${{ needs.get-tags.outputs.release-branch }}" --follow-tags
      - name: Create release PR
        run: |
          cat .git/refs/remotes/origin/release/greet/v0.0.2
          gh pr create -B "main" -t "Release ${{ needs.get-tags.outputs.new }}" -b ""
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
